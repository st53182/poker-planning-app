openapi: 3.0.3
info:
  title: Planning Poker API
  description: API for Planning Poker application with real-time collaboration
  version: 1.0.0
  contact:
    name: Planning Poker Team
    email: support@planningpoker.com

servers:
  - url: http://localhost:10000
    description: Development server
  - url: https://poker-planning-app-90yc.onrender.com
    description: Production server

paths:
  /:
    get:
      summary: Home page
      description: Serves the main page for creating a new planning poker room
      responses:
        '200':
          description: HTML page for room creation
          content:
            text/html:
              schema:
                type: string

  /room/{link}:
    get:
      summary: Room page
      description: Serves the planning poker room interface
      parameters:
        - name: link
          in: path
          required: true
          description: Encrypted room link
          schema:
            type: string
            pattern: '^[a-f0-9]{32}$'
        - name: name
          in: query
          description: Participant name
          schema:
            type: string
        - name: competence
          in: query
          description: Participant competence
          schema:
            type: string
            enum: [Frontend, Backend, Fullstack, QA, Analyst, Architect, "Scrum Master", "Project Manager", "Team Lead"]
      responses:
        '200':
          description: HTML page for planning poker room
          content:
            text/html:
              schema:
                type: string

  /api/create-room:
    post:
      summary: Create a new planning poker room
      description: Creates a new room with unique encrypted link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - estimation_type
                - creator_name
                - creator_competence
              properties:
                name:
                  type: string
                  description: Room name
                  example: "Sprint Planning - Team Alpha"
                estimation_type:
                  type: string
                  enum: [story_points, hours]
                  description: Type of estimation
                  example: "story_points"
                creator_name:
                  type: string
                  description: Name of room creator
                  example: "John Doe"
                creator_competence:
                  type: string
                  enum: [Frontend, Backend, Fullstack, QA, Analyst, Architect, "Scrum Master", "Project Manager", "Team Lead"]
                  description: Creator's competence
                  example: "Fullstack"
      responses:
        '200':
          description: Room created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  room_link:
                    type: string
                    description: Encrypted room link
                    example: "a1b2c3d4e5f6789012345678901234ab"
                  room:
                    $ref: '#/components/schemas/Room'
                  participant:
                    $ref: '#/components/schemas/Participant'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid estimation type"

  /api/docs:
    get:
      summary: API documentation
      description: Returns the OpenAPI specification in JSON format
      responses:
        '200':
          description: OpenAPI specification
          content:
            application/json:
              schema:
                type: object

  /docs:
    get:
      summary: Interactive API documentation
      description: Swagger UI for interactive API documentation
      responses:
        '200':
          description: Swagger UI HTML page
          content:
            text/html:
              schema:
                type: string

components:
  schemas:
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique room identifier
        name:
          type: string
          description: Room name
        estimation_type:
          type: string
          enum: [story_points, hours]
          description: Type of estimation used in this room
        encrypted_link:
          type: string
          description: Encrypted link for room access
        created_at:
          type: string
          format: date-time
          description: Room creation timestamp
        current_story_id:
          type: string
          format: uuid
          nullable: true
          description: ID of currently active story
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        stories:
          type: array
          items:
            $ref: '#/components/schemas/Story'

    Participant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique participant identifier
        room_id:
          type: string
          format: uuid
          description: Room this participant belongs to
        name:
          type: string
          description: Participant name
        competence:
          type: string
          enum: [Frontend, Backend, Fullstack, QA, Analyst, Architect, "Scrum Master", "Project Manager", "Team Lead"]
          description: Participant's technical competence
        is_admin:
          type: boolean
          description: Whether participant has admin privileges
        session_id:
          type: string
          nullable: true
          description: Session identifier for reconnection
        joined_at:
          type: string
          format: date-time
          description: When participant joined the room

    Story:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique story identifier
        room_id:
          type: string
          format: uuid
          description: Room this story belongs to
        title:
          type: string
          description: Story title
        description:
          type: string
          nullable: true
          description: Optional story description
        voting_state:
          type: string
          enum: [not_started, voting, revealed, completed]
          description: Current voting state
        final_estimate:
          type: number
          nullable: true
          description: Final agreed estimate
        created_by:
          type: string
          format: uuid
          description: ID of participant who created the story
        created_at:
          type: string
          format: date-time
          description: Story creation timestamp

    Vote:
      type: object
      properties:
        participant_id:
          type: string
          format: uuid
          description: ID of voting participant
        participant_name:
          type: string
          description: Name of voting participant
        competence:
          type: string
          enum: [Frontend, Backend, Fullstack, QA, Analyst, Architect, "Scrum Master", "Project Manager", "Team Lead"]
          description: Competence of voting participant
        points:
          type: number
          description: Vote value

  securitySchemes: {}

tags:
  - name: Rooms
    description: Room management operations
  - name: Documentation
    description: API documentation endpoints

externalDocs:
  description: Planning Poker GitHub Repository
  url: https://github.com/st53182/poker-planning-app
